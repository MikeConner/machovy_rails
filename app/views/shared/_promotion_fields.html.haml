.row-fluid
  .span8
    = f.label :title
    = f.text_field :title, :size => Promotion::MAX_TITLE_LEN
    = f.label :subtitle
    = f.text_field :subtitle, :size => Promotion::MAX_TITLE_LEN
    = f.label :description
    = f.text_area :description, :size => "60x12"
    = f.label :limitations
    = f.text_area :limitations, :size => "60x12"
    = f.label :voucher_instructions
    = f.text_area :voucher_instructions, :size => "60x6"
    .row-fluid 
      .span4 
        = f.label :teaser_image
        = f.file_field :teaser_image
        = f.label :remote_teaser_image_url, "or image URL"
        = f.text_field :remote_teaser_image_url
      .span4
        = f.label :main_image, "Additional Image"
        = f.file_field :main_image
        = f.label :remote_main_image_url, "or image URL"
        = f.text_field :remote_main_image_url
      .span4
        .slideshow
          = f.fields_for :promotion_images do |slideshow_image_form|
            = render :partial => 'shared/slideshow', :locals => { :f => slideshow_image_form }
  .span4
    .field
      = f.label :metro_id
      = f.collection_select :metro_id, metros, :id, :name 
      = f.label :retail_value
      = f.text_field :retail_value, :size => 15
      = f.label :price
      = f.text_field :price, :size => 15
      = f.label :revenue_shared
      #slider_value== #{share_pct}%
      .slider-input#revenue_slider
      %br
      = f.hidden_field :revenue_shared, :value => share_pct
      = f.label :quantity
      = f.number_field :quantity, :min => 1, :value => quantity
      = f.label :min_per_customer, 'Minimum quantity customers can purchase'
      %em Typically 1, but could be higher (e.g., 2-for-1 deals where the customer must buy 2 in order to get the price)
      = f.number_field :min_per_customer, :min => 1
      = f.label :max_per_customer, 'Maximum quantity per customer'
      %em Zero means "Unlimited"
      = f.number_field :max_per_customer, :min => 0
      = f.label :start_date
      -# Need the date_select elements for the nested attributes to be processed correctly by the controller
        Just don't show them; create jQuery datepickers instead
      = f.date_select :start_date, { :order => [:month, :day, :year] }, { :style => 'display:none' }
      #jq_start_date
      %br/
      = hidden_field_tag :promotion_strategy, 'Fixed'
      %ul.nav.nav-tabs#promotionStrategyTab
        -# Names of anchors match PromotionStrategyFactory class arguments
        %li.active.tab
          %a#Fixed{:href => '#tab1'}
            Fixed
        %li.tab
          %a#Relative{:href => '#tab2'}
            Relative
      .tab-content
        #tab1.tab-pane.fade.in.active
          %h4.tab-title Vouchers expire on a fixed date
          = f.label :end_date
          = f.date_select :end_date, { :order => [:month, :day, :year] }, { :style => 'display:none' }
          #jq_fixed_end_date
        #tab2.tab-pane
          %h4.tab-title Vouchers expire after so many days
          = label_tag :period
          = select_tag :period, options_for_select([['30','30'], ['60','60'],['90','90'],['180','180']])
          %em This date is the last day you want the promotion to be displayed
          #jq_rel_end_date
.row-fluid
  .span12
    .space
    = f.submit 'Submit', :class => 'btn btn-danger btn-large'
