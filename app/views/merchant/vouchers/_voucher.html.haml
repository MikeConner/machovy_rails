.row.voucher-order
  - if current_user.has_role?(Role::MERCHANT)
    .btn.btn-success.btn-large
      -# button_to makes a form, so they'd appear on separate lines
      -# need promotion id to redisplay the same form (could use Ajax and a partial to render the buttons; let's try it this way first)
      - if v.redeemable?
        = link_to "Redeem", redeem_admin_merchant_voucher_path(v, :status => Voucher::REDEEMED), :method => :put, :confirm => 'Please verify the amount and email. Redeem this voucher?'
      -# It is unredeemable if its status is redeemed, but it hasn't yet been paid (same conditions as payment_owed)
      -# TODO: make this in to elsif
      - if v.payment_owed?
        = link_to "Unredeem", redeem_admin_merchant_voucher_path(v, :status => Voucher::AVAILABLE), :method => :put, :confirm => 'You will make the voucher available again. Payment will be made after redemption. Are you sure?'
      -# Don't let them return for now (business issue)
        - if v.returnable?
          = link_to "Return", redeem_admin_merchant_voucher_path(v, :status => Voucher::RETURNED), :method => :put, :confirm => 'Returning a voucher voids it so that no one can use it and no further action is possible. Are you sure?'
  - elsif current_user.has_role?(Role::SUPER_ADMIN)
    - if v.returnable?
      = form_tag redeem_admin_merchant_voucher_path(v), :method => :put do
        = hidden_field_tag :status, Voucher::RETURNED
        = label_tag 'notes', 'Notes about this return'
        = text_area_tag 'notes', nil, :size => '60x3'
        %br/
        = submit_tag 'Return', :class => 'btn.btn-success.btn-large', :onclick => "return confirm('Returning a voucher voids it so that no one can use it, and credits Macho Bucks. No further action is possible. Are you sure?')"
  .six.columns
  .seven.columns    
    %strong.voucher= v.uuid
    %h4= v.promotion.title
    %h5= "$" + v.order.total_cost.to_s
  .four.columns 
    .space
    %strong.email= v.order.email
    %p= v.status
    .span5.product
  %table.table.table-condensed
    %thead
      %tr
        %th Redemption
        %th Date Issued
        %th Expiration
    %tbody
      %tr
        %td= v.redemption_date.try(:strftime, '%b %d, %Y')
        %td= "Issued: " + v.valid_date.try(:strftime, '%b %d, %Y')
        %td= "Expires: "+  v.expiration_date.try(:strftime, '%b %d, %Y')
  - if !v.order.fine_print.nil?
    %p= "Limitations: " + v.order.fine_print

