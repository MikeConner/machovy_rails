.row-fluid
  .well.well-large
    - if admin
      .btn.btn-success.btn-large
        -# button_to makes a form, so they'd appear on separate lines
        -# need promotion id to redisplay the same form (could use Ajax and a partial to render the buttons; let's try it this way first)
        - if v.redeemable?
          = link_to "Redeem", redeem_admin_merchant_voucher_path(v, :status => Voucher::REDEEMED), :method => :put, :confirm => 'Please verify the amount and email. Redeem this voucher?'
        -# It is unredeemable if its status is redeemed, but it hasn't yet been paid (same conditions as payment_owed)
        -# TODO: make this in to elsif
        - if v.payment_owed?
          = link_to "Unredeem", redeem_admin_merchant_voucher_path(v, :status => Voucher::AVAILABLE), :method => :put, :confirm => 'If the voucher was previously redeemed in error, you can make it available again. Are you sure?'
        -# Don't let them return for now (business issue)
          - if v.returnable?
            = link_to "Return", redeem_admin_merchant_voucher_path(v, :status => Voucher::RETURNED), :method => :put, :confirm => 'Returning a voucher voids it so that no one can use it and no further action is possible. Are you sure?'
    = v.uuid + " : " + v.order.email
    %h3= v.promotion.title
    %h4= "$" + v.order.total_cost.to_s
    %p= v.status
    %p= v.redemption_date.try(:strftime, '%b %d, %Y')
    %p= "Issued: " + v.issue_date.try(:strftime, '%b %d, %Y')
    %p= "Expires: "+  v.expiration_date.try(:strftime, '%b %d, %Y')
    %p= "Limitations: " + v.order.fine_print